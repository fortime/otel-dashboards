{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 1,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": true,
            "inspect": false
          },
          "links": [
            {
              "title": "Show Trace",
              "url": "/d/${__dashboard.uid}?orgId=${__org}&${__url_time_range}&${host:queryparam}&${level:queryparam}&${service_name:queryparam}&var-trace_id=${__data.fields.trace_id}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "options": {
        "footer": {
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 6,
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "service.name"
          }
        ]
      },
      "pluginVersion": "9.1.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"spans\" and not exists r.parent_span_id\n  )\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> drop(columns: [\"_start\", \"_stop\", \"_measurement\"])\n  |> group()",
          "refId": "A"
        }
      ],
      "title": "Traces",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "_time": 0,
              "busy_ns": 7,
              "client.ip": 8,
              "client.port": 9,
              "code.filepath": 10,
              "code.lineno": 11,
              "code.namespace": 12,
              "duration_nano": 13,
              "end_time_unix_nano": 14,
              "host": 4,
              "idle_ns": 15,
              "kind": 5,
              "name": 1,
              "pipe.id": 18,
              "service.name": 6,
              "span_id": 3,
              "thread.id": 16,
              "thread.name": 17,
              "trace_id": 2
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "gridPos": {
        "h": 16,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 4,
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "query": "import \"array\"\nimport \"experimental\"\nimport \"experimental/array\"\nimport \"experimental/record\"\nimport \"json\"\nimport \"strings\"\n\nconvert = (r) => {\n  keys = experimental.objectKeys(o: r)\n  tags = keys\n    |> array.filter(fn: (x) => strings.hasPrefix(prefix: \"_tag_\", v: x)) \n    |> array.map(fn: (x) => ({key: strings.trimPrefix(prefix: \"_tag_\", v: x), value: record.get(r: r, key: x, default: \"\")}))\n  return {r with tags: string(v: json.encode(v: tags))}\n}\n\nfrom(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"spans\" and r.trace_id == \"${trace_id}\" and (\"${span_id}\" == \"\" or \"${span_id}\" == r.span_id)\n  )\n  |> map(fn: (r) => {\n    prefix = if r._field != \"duration_nano\" and r._field != \"end_time_unix_nano\" then\n      \"_tag_\"\n    else\n      \"\"\n    return {r with _field: prefix + r._field}\n  })\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => convert(r: r))\n  |> map(fn: (r) => {\n    serviceTags = \"[]\"\n    parentSpanID = if exists r.parent_span_id then\n      r.parent_span_id\n    else\n      \"\"\n    return {traceID: r.trace_id, spanID: r.span_id, parentSpanID: parentSpanID, operationName: r.name, serviceName: r[\"service.name\"], startTime: (r.end_time_unix_nano - r.duration_nano) / 1000000, duration: r.duration_nano / 1000000, serviceTags: serviceTags, tags: r.tags}\n  })\n",
          "refId": "A"
        }
      ],
      "title": "Trace",
      "transformations": [
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [
              {
                "destinationType": "other",
                "targetField": "serviceTags"
              },
              {
                "destinationType": "other",
                "targetField": "tags"
              }
            ],
            "fields": {}
          }
        }
      ],
      "type": "traces"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${datasource}"
      },
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "maxDataPoints": 1024,
      "options": {
        "dedupStrategy": "none",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": true,
        "showLabels": false,
        "showTime": true,
        "sortOrder": "Ascending",
        "wrapLogMessage": false
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${datasource}"
          },
          "hide": false,
          "query": "\nimport \"strings\"\n\nvalueIn = (va, s) => {\n    return if s == \"auto\" then\n      true\n    else\n      contains(\n        value: va,\n        set: strings.split(\n          v: strings.trimRight(\n            v: strings.trimLeft(\n              v: s,\n              cutset: \"{\"),\n            cutset: \"}\"),\n          t: \",\"))\n}\n\nfrom(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"logs\"\n  )\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> filter(fn: (r) =>\n    valueIn(va: r[\"host\"], s: \"${host}\")\n  )\n  |> filter(fn: (r) =>\n    valueIn(va: r[\"level\"], s: \"${level}\")\n  )\n  |> filter(fn: (r) =>\n    \"${trace_id}\" == \"\" or \"${trace_id}\" == r[\"trace_id\"]\n  )\n  |> filter(fn: (r) =>\n    \"${span_id}\" == \"\" or \"${span_id}\" == r[\"span_id\"]\n  )\n  |> filter(fn: (r) =>\n    valueIn(va: r[\"service.name\"], s: \"${service_name}\")\n  )\n  |> map(fn: (r) => ({r with _value: r.name}))\n  |> drop(columns: [\"name\", \"_start\", \"_stop\", \"_measurement\"])",
          "refId": "A"
        }
      ],
      "title": "Log",
      "type": "logs"
    }
  ],
  "refresh": "5m",
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": "auto",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"logs\"\n  )\n  |> map(fn: (r) => ({_value: r.host}))\n  |> unique()\n",
        "hide": 0,
        "includeAll": true,
        "label": "Host",
        "multi": true,
        "name": "host",
        "options": [],
        "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"logs\"\n  )\n  |> map(fn: (r) => ({_value: r.host}))\n  |> unique()\n",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "auto",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "hide": 0,
        "includeAll": true,
        "label": "Level",
        "multi": true,
        "name": "level",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "TRACE",
            "value": "TRACE"
          },
          {
            "selected": false,
            "text": "DEBUG",
            "value": "DEBUG"
          },
          {
            "selected": false,
            "text": "INFO",
            "value": "INFO"
          },
          {
            "selected": false,
            "text": "WARN",
            "value": "WARN"
          },
          {
            "selected": false,
            "text": "ERROR",
            "value": "ERROR"
          },
          {
            "selected": false,
            "text": "FATAL",
            "value": "FATAL"
          }
        ],
        "query": "TRACE, DEBUG, INFO, WARN, ERROR, FATAL",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "037c422ed19f3d6a625d6259aaeeba5c",
          "value": "037c422ed19f3d6a625d6259aaeeba5c"
        },
        "hide": 0,
        "label": "TraceId",
        "name": "trace_id",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "037c422ed19f3d6a625d6259aaeeba5c",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "hide": 0,
        "label": "SpanId",
        "name": "span_id",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "allValue": "auto",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "influxdb",
          "uid": "${datasource}"
        },
        "definition": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"logs\"\n  )\n  |> map(fn: (r) => ({_value: r[\"service.name\"]}))\n  |> unique()",
        "hide": 0,
        "includeAll": true,
        "label": "Service",
        "multi": true,
        "name": "service_name",
        "options": [],
        "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"logs\"\n  )\n  |> map(fn: (r) => ({_value: r[\"service.name\"]}))\n  |> unique()",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "hide": 2,
        "name": "bucket",
        "query": "default",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "current": {
          "selected": false,
          "text": "InfluxDB",
          "value": "InfluxDB"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "influxdb",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Otel Trace Log",
  "uid": "J8REZoMVz",
  "version": 35,
  "weekStart": ""
}
